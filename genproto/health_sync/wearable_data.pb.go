// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: wearable_data.proto

package health_sync

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WearableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId            string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceType        string  `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	StepCount         int32   `protobuf:"varint,4,opt,name=step_count,json=stepCount,proto3" json:"step_count,omitempty"`
	CaloriesBurned    float32 `protobuf:"fixed32,5,opt,name=calories_burned,json=caloriesBurned,proto3" json:"calories_burned,omitempty"`
	DistanceTraveled  float32 `protobuf:"fixed32,6,opt,name=distance_traveled,json=distanceTraveled,proto3" json:"distance_traveled,omitempty"`
	HeartRate         int32   `protobuf:"varint,7,opt,name=heart_rate,json=heartRate,proto3" json:"heart_rate,omitempty"`
	SleepDuration     float32 `protobuf:"fixed32,8,opt,name=sleep_duration,json=sleepDuration,proto3" json:"sleep_duration,omitempty"`
	WorkoutType       string  `protobuf:"bytes,9,opt,name=workout_type,json=workoutType,proto3" json:"workout_type,omitempty"`
	Temperature       float32 `protobuf:"fixed32,10,opt,name=temperature,proto3" json:"temperature,omitempty"`
	RecordedTimestamp string  `protobuf:"bytes,11,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"`
	CreatedAt         string  `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         string  `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int32   `protobuf:"varint,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *WearableData) Reset() {
	*x = WearableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableData) ProtoMessage() {}

func (x *WearableData) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableData.ProtoReflect.Descriptor instead.
func (*WearableData) Descriptor() ([]byte, []int) {
	return file_wearable_data_proto_rawDescGZIP(), []int{0}
}

func (x *WearableData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WearableData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WearableData) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *WearableData) GetStepCount() int32 {
	if x != nil {
		return x.StepCount
	}
	return 0
}

func (x *WearableData) GetCaloriesBurned() float32 {
	if x != nil {
		return x.CaloriesBurned
	}
	return 0
}

func (x *WearableData) GetDistanceTraveled() float32 {
	if x != nil {
		return x.DistanceTraveled
	}
	return 0
}

func (x *WearableData) GetHeartRate() int32 {
	if x != nil {
		return x.HeartRate
	}
	return 0
}

func (x *WearableData) GetSleepDuration() float32 {
	if x != nil {
		return x.SleepDuration
	}
	return 0
}

func (x *WearableData) GetWorkoutType() string {
	if x != nil {
		return x.WorkoutType
	}
	return ""
}

func (x *WearableData) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *WearableData) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

func (x *WearableData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WearableData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *WearableData) GetDeletedAt() int32 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type WearableDataCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceType        string  `protobuf:"bytes,2,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	StepCount         int32   `protobuf:"varint,3,opt,name=step_count,json=stepCount,proto3" json:"step_count,omitempty"`
	CaloriesBurned    float32 `protobuf:"fixed32,4,opt,name=calories_burned,json=caloriesBurned,proto3" json:"calories_burned,omitempty"`
	DistanceTraveled  float32 `protobuf:"fixed32,5,opt,name=distance_traveled,json=distanceTraveled,proto3" json:"distance_traveled,omitempty"`
	HeartRate         int32   `protobuf:"varint,6,opt,name=heart_rate,json=heartRate,proto3" json:"heart_rate,omitempty"`
	SleepDuration     float32 `protobuf:"fixed32,7,opt,name=sleep_duration,json=sleepDuration,proto3" json:"sleep_duration,omitempty"`
	WorkoutType       string  `protobuf:"bytes,8,opt,name=workout_type,json=workoutType,proto3" json:"workout_type,omitempty"`
	Temperature       float32 `protobuf:"fixed32,9,opt,name=temperature,proto3" json:"temperature,omitempty"`
	RecordedTimestamp string  `protobuf:"bytes,10,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"`
}

func (x *WearableDataCreate) Reset() {
	*x = WearableDataCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableDataCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableDataCreate) ProtoMessage() {}

func (x *WearableDataCreate) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableDataCreate.ProtoReflect.Descriptor instead.
func (*WearableDataCreate) Descriptor() ([]byte, []int) {
	return file_wearable_data_proto_rawDescGZIP(), []int{1}
}

func (x *WearableDataCreate) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WearableDataCreate) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *WearableDataCreate) GetStepCount() int32 {
	if x != nil {
		return x.StepCount
	}
	return 0
}

func (x *WearableDataCreate) GetCaloriesBurned() float32 {
	if x != nil {
		return x.CaloriesBurned
	}
	return 0
}

func (x *WearableDataCreate) GetDistanceTraveled() float32 {
	if x != nil {
		return x.DistanceTraveled
	}
	return 0
}

func (x *WearableDataCreate) GetHeartRate() int32 {
	if x != nil {
		return x.HeartRate
	}
	return 0
}

func (x *WearableDataCreate) GetSleepDuration() float32 {
	if x != nil {
		return x.SleepDuration
	}
	return 0
}

func (x *WearableDataCreate) GetWorkoutType() string {
	if x != nil {
		return x.WorkoutType
	}
	return ""
}

func (x *WearableDataCreate) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *WearableDataCreate) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

type WearableDataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType        string  `protobuf:"bytes,1,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	StepCount         int32   `protobuf:"varint,2,opt,name=step_count,json=stepCount,proto3" json:"step_count,omitempty"`
	CaloriesBurned    float32 `protobuf:"fixed32,3,opt,name=calories_burned,json=caloriesBurned,proto3" json:"calories_burned,omitempty"`
	DistanceTraveled  float32 `protobuf:"fixed32,4,opt,name=distance_traveled,json=distanceTraveled,proto3" json:"distance_traveled,omitempty"`
	HeartRate         int32   `protobuf:"varint,5,opt,name=heart_rate,json=heartRate,proto3" json:"heart_rate,omitempty"`
	SleepDuration     float32 `protobuf:"fixed32,6,opt,name=sleep_duration,json=sleepDuration,proto3" json:"sleep_duration,omitempty"`
	WorkoutType       string  `protobuf:"bytes,7,opt,name=workout_type,json=workoutType,proto3" json:"workout_type,omitempty"`
	RecordedTimestamp string  `protobuf:"bytes,8,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"`
	Temperature       float32 `protobuf:"fixed32,9,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Id                string  `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WearableDataUpdate) Reset() {
	*x = WearableDataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableDataUpdate) ProtoMessage() {}

func (x *WearableDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableDataUpdate.ProtoReflect.Descriptor instead.
func (*WearableDataUpdate) Descriptor() ([]byte, []int) {
	return file_wearable_data_proto_rawDescGZIP(), []int{2}
}

func (x *WearableDataUpdate) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *WearableDataUpdate) GetStepCount() int32 {
	if x != nil {
		return x.StepCount
	}
	return 0
}

func (x *WearableDataUpdate) GetCaloriesBurned() float32 {
	if x != nil {
		return x.CaloriesBurned
	}
	return 0
}

func (x *WearableDataUpdate) GetDistanceTraveled() float32 {
	if x != nil {
		return x.DistanceTraveled
	}
	return 0
}

func (x *WearableDataUpdate) GetHeartRate() int32 {
	if x != nil {
		return x.HeartRate
	}
	return 0
}

func (x *WearableDataUpdate) GetSleepDuration() float32 {
	if x != nil {
		return x.SleepDuration
	}
	return 0
}

func (x *WearableDataUpdate) GetWorkoutType() string {
	if x != nil {
		return x.WorkoutType
	}
	return ""
}

func (x *WearableDataUpdate) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

func (x *WearableDataUpdate) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *WearableDataUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WearableDataUpdateBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType        string  `protobuf:"bytes,1,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	StepCount         int32   `protobuf:"varint,2,opt,name=step_count,json=stepCount,proto3" json:"step_count,omitempty"`
	CaloriesBurned    float32 `protobuf:"fixed32,3,opt,name=calories_burned,json=caloriesBurned,proto3" json:"calories_burned,omitempty"`
	DistanceTraveled  float32 `protobuf:"fixed32,4,opt,name=distance_traveled,json=distanceTraveled,proto3" json:"distance_traveled,omitempty"`
	HeartRate         int32   `protobuf:"varint,5,opt,name=heart_rate,json=heartRate,proto3" json:"heart_rate,omitempty"`
	SleepDuration     float32 `protobuf:"fixed32,6,opt,name=sleep_duration,json=sleepDuration,proto3" json:"sleep_duration,omitempty"`
	WorkoutType       string  `protobuf:"bytes,7,opt,name=workout_type,json=workoutType,proto3" json:"workout_type,omitempty"`
	RecordedTimestamp string  `protobuf:"bytes,8,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"`
}

func (x *WearableDataUpdateBody) Reset() {
	*x = WearableDataUpdateBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableDataUpdateBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableDataUpdateBody) ProtoMessage() {}

func (x *WearableDataUpdateBody) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableDataUpdateBody.ProtoReflect.Descriptor instead.
func (*WearableDataUpdateBody) Descriptor() ([]byte, []int) {
	return file_wearable_data_proto_rawDescGZIP(), []int{3}
}

func (x *WearableDataUpdateBody) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *WearableDataUpdateBody) GetStepCount() int32 {
	if x != nil {
		return x.StepCount
	}
	return 0
}

func (x *WearableDataUpdateBody) GetCaloriesBurned() float32 {
	if x != nil {
		return x.CaloriesBurned
	}
	return 0
}

func (x *WearableDataUpdateBody) GetDistanceTraveled() float32 {
	if x != nil {
		return x.DistanceTraveled
	}
	return 0
}

func (x *WearableDataUpdateBody) GetHeartRate() int32 {
	if x != nil {
		return x.HeartRate
	}
	return 0
}

func (x *WearableDataUpdateBody) GetSleepDuration() float32 {
	if x != nil {
		return x.SleepDuration
	}
	return 0
}

func (x *WearableDataUpdateBody) GetWorkoutType() string {
	if x != nil {
		return x.WorkoutType
	}
	return ""
}

func (x *WearableDataUpdateBody) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

type WearableDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId            string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceType        string  `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	StepCount         int32   `protobuf:"varint,4,opt,name=step_count,json=stepCount,proto3" json:"step_count,omitempty"`
	CaloriesBurned    float32 `protobuf:"fixed32,5,opt,name=calories_burned,json=caloriesBurned,proto3" json:"calories_burned,omitempty"`
	DistanceTraveled  float32 `protobuf:"fixed32,6,opt,name=distance_traveled,json=distanceTraveled,proto3" json:"distance_traveled,omitempty"`
	HeartRate         int32   `protobuf:"varint,7,opt,name=heart_rate,json=heartRate,proto3" json:"heart_rate,omitempty"`
	SleepDuration     float32 `protobuf:"fixed32,8,opt,name=sleep_duration,json=sleepDuration,proto3" json:"sleep_duration,omitempty"`
	WorkoutType       string  `protobuf:"bytes,9,opt,name=workout_type,json=workoutType,proto3" json:"workout_type,omitempty"`
	Temperature       float32 `protobuf:"fixed32,10,opt,name=temperature,proto3" json:"temperature,omitempty"`
	RecordedTimestamp string  `protobuf:"bytes,11,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"`
}

func (x *WearableDataRes) Reset() {
	*x = WearableDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WearableDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WearableDataRes) ProtoMessage() {}

func (x *WearableDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WearableDataRes.ProtoReflect.Descriptor instead.
func (*WearableDataRes) Descriptor() ([]byte, []int) {
	return file_wearable_data_proto_rawDescGZIP(), []int{4}
}

func (x *WearableDataRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WearableDataRes) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WearableDataRes) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *WearableDataRes) GetStepCount() int32 {
	if x != nil {
		return x.StepCount
	}
	return 0
}

func (x *WearableDataRes) GetCaloriesBurned() float32 {
	if x != nil {
		return x.CaloriesBurned
	}
	return 0
}

func (x *WearableDataRes) GetDistanceTraveled() float32 {
	if x != nil {
		return x.DistanceTraveled
	}
	return 0
}

func (x *WearableDataRes) GetHeartRate() int32 {
	if x != nil {
		return x.HeartRate
	}
	return 0
}

func (x *WearableDataRes) GetSleepDuration() float32 {
	if x != nil {
		return x.SleepDuration
	}
	return 0
}

func (x *WearableDataRes) GetWorkoutType() string {
	if x != nil {
		return x.WorkoutType
	}
	return ""
}

func (x *WearableDataRes) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *WearableDataRes) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

type GetAllWearableDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RecordedTimestamp string  `protobuf:"bytes,2,opt,name=recorded_timestamp,json=recordedTimestamp,proto3" json:"recorded_timestamp,omitempty"`
	Filter            *Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetAllWearableDataReq) Reset() {
	*x = GetAllWearableDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllWearableDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllWearableDataReq) ProtoMessage() {}

func (x *GetAllWearableDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllWearableDataReq.ProtoReflect.Descriptor instead.
func (*GetAllWearableDataReq) Descriptor() ([]byte, []int) {
	return file_wearable_data_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllWearableDataReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetAllWearableDataReq) GetRecordedTimestamp() string {
	if x != nil {
		return x.RecordedTimestamp
	}
	return ""
}

func (x *GetAllWearableDataReq) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetAllWearableDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WearableData []*WearableDataRes `protobuf:"bytes,1,rep,name=wearable_data,json=wearableData,proto3" json:"wearable_data,omitempty"`
	Count        int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetAllWearableDataRes) Reset() {
	*x = GetAllWearableDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wearable_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllWearableDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllWearableDataRes) ProtoMessage() {}

func (x *GetAllWearableDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_wearable_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllWearableDataRes.ProtoReflect.Descriptor instead.
func (*GetAllWearableDataRes) Descriptor() ([]byte, []int) {
	return file_wearable_data_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllWearableDataRes) GetWearableData() []*WearableDataRes {
	if x != nil {
		return x.WearableData
	}
	return nil
}

func (x *GetAllWearableDataRes) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_wearable_data_proto protoreflect.FileDescriptor

var file_wearable_data_proto_rawDesc = []byte{
	0x0a, 0x13, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe4, 0x03, 0x0a, 0x0c, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61,
	0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfd, 0x02, 0x0a, 0x12, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74,
	0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf4, 0x02, 0x0a, 0x12, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc6,
	0x02, 0x0a, 0x16, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x65, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6c,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8a, 0x03, 0x0a, 0x0f, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x62, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63,
	0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57,
	0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0d,
	0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x52, 0x0c, 0x77, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xac, 0x03, 0x0a, 0x13, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x11, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x33, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x11, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x1a,
	0x1c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x57, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x57, 0x65, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x1a, 0x1c, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x57, 0x65, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x42, 0x16, 0x5a, 0x14, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wearable_data_proto_rawDescOnce sync.Once
	file_wearable_data_proto_rawDescData = file_wearable_data_proto_rawDesc
)

func file_wearable_data_proto_rawDescGZIP() []byte {
	file_wearable_data_proto_rawDescOnce.Do(func() {
		file_wearable_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_wearable_data_proto_rawDescData)
	})
	return file_wearable_data_proto_rawDescData
}

var file_wearable_data_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_wearable_data_proto_goTypes = []any{
	(*WearableData)(nil),           // 0: health_sync.WearableData
	(*WearableDataCreate)(nil),     // 1: health_sync.WearableDataCreate
	(*WearableDataUpdate)(nil),     // 2: health_sync.WearableDataUpdate
	(*WearableDataUpdateBody)(nil), // 3: health_sync.WearableDataUpdateBody
	(*WearableDataRes)(nil),        // 4: health_sync.WearableDataRes
	(*GetAllWearableDataReq)(nil),  // 5: health_sync.GetAllWearableDataReq
	(*GetAllWearableDataRes)(nil),  // 6: health_sync.GetAllWearableDataRes
	(*Filter)(nil),                 // 7: health_sync.Filter
	(*GetById)(nil),                // 8: health_sync.GetById
	(*Void)(nil),                   // 9: health_sync.Void
}
var file_wearable_data_proto_depIdxs = []int32{
	7, // 0: health_sync.GetAllWearableDataReq.filter:type_name -> health_sync.Filter
	4, // 1: health_sync.GetAllWearableDataRes.wearable_data:type_name -> health_sync.WearableDataRes
	1, // 2: health_sync.WearableDataService.Create:input_type -> health_sync.WearableDataCreate
	2, // 3: health_sync.WearableDataService.Update:input_type -> health_sync.WearableDataUpdate
	8, // 4: health_sync.WearableDataService.Delete:input_type -> health_sync.GetById
	8, // 5: health_sync.WearableDataService.Get:input_type -> health_sync.GetById
	5, // 6: health_sync.WearableDataService.List:input_type -> health_sync.GetAllWearableDataReq
	8, // 7: health_sync.WearableDataService.GetRealTimeMonitoringData:input_type -> health_sync.GetById
	9, // 8: health_sync.WearableDataService.Create:output_type -> health_sync.Void
	9, // 9: health_sync.WearableDataService.Update:output_type -> health_sync.Void
	9, // 10: health_sync.WearableDataService.Delete:output_type -> health_sync.Void
	4, // 11: health_sync.WearableDataService.Get:output_type -> health_sync.WearableDataRes
	6, // 12: health_sync.WearableDataService.List:output_type -> health_sync.GetAllWearableDataRes
	4, // 13: health_sync.WearableDataService.GetRealTimeMonitoringData:output_type -> health_sync.WearableDataRes
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_wearable_data_proto_init() }
func file_wearable_data_proto_init() {
	if File_wearable_data_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wearable_data_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*WearableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_data_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*WearableDataCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_data_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*WearableDataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_data_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*WearableDataUpdateBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_data_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*WearableDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_data_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllWearableDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wearable_data_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllWearableDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wearable_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wearable_data_proto_goTypes,
		DependencyIndexes: file_wearable_data_proto_depIdxs,
		MessageInfos:      file_wearable_data_proto_msgTypes,
	}.Build()
	File_wearable_data_proto = out.File
	file_wearable_data_proto_rawDesc = nil
	file_wearable_data_proto_goTypes = nil
	file_wearable_data_proto_depIdxs = nil
}
