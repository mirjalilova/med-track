// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: wearable_data.proto

package health_sync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WearableDataService_Create_FullMethodName = "/health_sync.WearableDataService/Create"
	WearableDataService_Update_FullMethodName = "/health_sync.WearableDataService/Update"
	WearableDataService_Delete_FullMethodName = "/health_sync.WearableDataService/Delete"
	WearableDataService_Get_FullMethodName    = "/health_sync.WearableDataService/Get"
	WearableDataService_List_FullMethodName   = "/health_sync.WearableDataService/List"
)

// WearableDataServiceClient is the client API for WearableDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WearableDataServiceClient interface {
	Create(ctx context.Context, in *WearableDataCreate, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *WearableDataUpdate, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error)
	Get(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*WearableDataRes, error)
	List(ctx context.Context, in *GetAllWearableDataReq, opts ...grpc.CallOption) (*GetAllWearableDataRes, error)
}

type wearableDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWearableDataServiceClient(cc grpc.ClientConnInterface) WearableDataServiceClient {
	return &wearableDataServiceClient{cc}
}

func (c *wearableDataServiceClient) Create(ctx context.Context, in *WearableDataCreate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, WearableDataService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableDataServiceClient) Update(ctx context.Context, in *WearableDataUpdate, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, WearableDataService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableDataServiceClient) Delete(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, WearableDataService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableDataServiceClient) Get(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*WearableDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WearableDataRes)
	err := c.cc.Invoke(ctx, WearableDataService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wearableDataServiceClient) List(ctx context.Context, in *GetAllWearableDataReq, opts ...grpc.CallOption) (*GetAllWearableDataRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllWearableDataRes)
	err := c.cc.Invoke(ctx, WearableDataService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WearableDataServiceServer is the server API for WearableDataService service.
// All implementations must embed UnimplementedWearableDataServiceServer
// for forward compatibility
type WearableDataServiceServer interface {
	Create(context.Context, *WearableDataCreate) (*Void, error)
	Update(context.Context, *WearableDataUpdate) (*Void, error)
	Delete(context.Context, *GetById) (*Void, error)
	Get(context.Context, *GetById) (*WearableDataRes, error)
	List(context.Context, *GetAllWearableDataReq) (*GetAllWearableDataRes, error)
	mustEmbedUnimplementedWearableDataServiceServer()
}

// UnimplementedWearableDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWearableDataServiceServer struct {
}

func (UnimplementedWearableDataServiceServer) Create(context.Context, *WearableDataCreate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWearableDataServiceServer) Update(context.Context, *WearableDataUpdate) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWearableDataServiceServer) Delete(context.Context, *GetById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWearableDataServiceServer) Get(context.Context, *GetById) (*WearableDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWearableDataServiceServer) List(context.Context, *GetAllWearableDataReq) (*GetAllWearableDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWearableDataServiceServer) mustEmbedUnimplementedWearableDataServiceServer() {}

// UnsafeWearableDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WearableDataServiceServer will
// result in compilation errors.
type UnsafeWearableDataServiceServer interface {
	mustEmbedUnimplementedWearableDataServiceServer()
}

func RegisterWearableDataServiceServer(s grpc.ServiceRegistrar, srv WearableDataServiceServer) {
	s.RegisterService(&WearableDataService_ServiceDesc, srv)
}

func _WearableDataService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WearableDataCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDataServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDataService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDataServiceServer).Create(ctx, req.(*WearableDataCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableDataService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WearableDataUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDataServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDataService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDataServiceServer).Update(ctx, req.(*WearableDataUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableDataService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDataServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDataService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDataServiceServer).Delete(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableDataService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDataServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDataService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDataServiceServer).Get(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _WearableDataService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWearableDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WearableDataServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WearableDataService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WearableDataServiceServer).List(ctx, req.(*GetAllWearableDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WearableDataService_ServiceDesc is the grpc.ServiceDesc for WearableDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WearableDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "health_sync.WearableDataService",
	HandlerType: (*WearableDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WearableDataService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WearableDataService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WearableDataService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WearableDataService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WearableDataService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wearable_data.proto",
}
